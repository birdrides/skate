package skate.generator

import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import skate.Expression
import skate.Value
import skate.alias
import skate.asGeoJson
import skate.concat
import skate.eq
import skate.from
import skate.insert
import skate.jsonGet
import skate.jsonGetText
import skate.jsonb
import skate.jsonbBuildObject
import skate.rowToJson
import skate.select
import skate.where
import test.Corral
import test.Drop
import test.User
import test.Vehicle
import java.util.UUID

@Suppress("UNCHECKED_CAST")
class SkateJsonbTest {

  private val psql = Postgresql()

  @Test
  fun basicBuildObject() {
    assertThat(
      psql.generate(
        jsonbBuildObject("foo" to (Value("bar") as Expression<Any>))
      )
    ).isEqualTo(
      Fragment(
        "jsonb_build_object('foo', ?)",
        listOf("bar")
      )
    )
  }

  @Test
  fun concatObjects() {
    assertThat(
      psql.generate(
        jsonbBuildObject("foo" to (Value("bar") as Expression<Any>)) concat jsonbBuildObject("foo" to (Value("bag") as Expression<Any>))
      )
    ).isEqualTo(
      Fragment(
        "jsonb_build_object('foo', ?) || jsonb_build_object('foo', ?)",
        listOf("bar", "bag")
      )
    )
  }

  @Test
  fun selectRowAsJson() {
    val uid = UUID.randomUUID()

    assertThat(
      psql.generate(
        User::class.select(rowToJson(User::class)).where(User::id eq Value(uid))
      ).let { listOf(it.sql, it.values) }
    ).isEqualTo(
      listOf(
        "SELECT row_to_json(\"users\") FROM \"users\" WHERE (\"users\".\"id\" = ?)",
        listOf(uid)
      )
    )
  }

  @Test
  fun selectRowAsJsonWithAlias() {
    val uid = UUID.randomUUID()

    val users = User::class.alias("users_alias")

    assertThat(
      psql.generate(
        users.select(rowToJson(users)).where(users[User::id] eq Value(uid))
      ).let { listOf(it.sql, it.values) }
    ).isEqualTo(
      listOf(
        "SELECT row_to_json(\"users_alias\") FROM \"users\" \"users_alias\" WHERE (\"users_alias\".\"id\" = ?)",
        listOf(uid)
      )
    )
  }

  @Test
  fun queryRowAsJson() {
    assertThat(
      psql.generate(
        Vehicle::class.insert(
          Vehicle::userId,
          Vehicle::code
        )
          .from<User> {
            select(
              this[User::id],
              rowToJson(this)
            )
          }
      )
    ).isEqualTo(
      InsertStatement(
        "INSERT INTO \"vehicles\" (\"user_id\", \"code\") (SELECT \"autogenerated_alias_insert_User\".\"id\", row_to_json(\"autogenerated_alias_insert_User\") FROM \"users\" \"autogenerated_alias_insert_User\")",
        "vehicles",
        listOf()
      )
    )
  }

  @Test
  fun queryRowAsJsonAndConcatLiteral() {
    assertThat(
      psql.generate(
        Vehicle::class.insert(
          Vehicle::userId,
          Vehicle::code
        )
          .from<Corral> {
            select(
              this[Corral::creatorId],
              rowToJson(this).jsonb() concat jsonbBuildObject("location" to ((asGeoJson(this[Corral::location]) as Expression<Any>)))
            )
          }
      )
    ).isEqualTo(
      InsertStatement(
        "INSERT INTO \"vehicles\" (\"user_id\", \"code\") (SELECT \"autogenerated_alias_insert_Corral\".\"creator_id\", (row_to_json(\"autogenerated_alias_insert_Corral\"))::jsonb || jsonb_build_object('location', ST_AsGeoJson(\"autogenerated_alias_insert_Corral\".\"location\")) FROM \"corrals\" \"autogenerated_alias_insert_Corral\")",
        "vehicles",
        listOf()
      )
    )
  }

  @Test
  fun introspectJsonbField() {
    assertThat(
      psql.generate(
        Drop::metadata.jsonGet("rank")
      )
    ).isEqualTo(
      Fragment(
        "\"drops\".\"metadata\" -> ?",
        listOf("rank")
      )
    )

    assertThat(
      psql.generate(
        Drop::metadata.jsonGetText("rank")
      )
    ).isEqualTo(
      Fragment(
        "\"drops\".\"metadata\" ->> ?",
        listOf("rank")
      )
    )
  }
}
